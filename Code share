# coefficient plot code

res2 <- rcorr(as.matrix(syd_ts[,-1]),type ="pearson")
r <- res2$r 
p <- res2$P 
p[is.na(p)] <- 1
corrplot(r, p.mat = p, insig = "label_sig",type="lower", addCoef.col = "black",
         order="original",method="color",outline="gray",cl.align = "c",
         tl.col=NULL,tl.pos = 'ld',diag = T,tl.srt=60,tl.cex = 1,cl.cex = 1.2,
         cl.pos = "r",tl.offset=0.1,cl.ratio =0.2,
         sig.level = c(0.001,0.01,.05), pch.cex = 1, pch.col = "transparent")

# GAM code

library(mgcv)
library(nlme)
syd_gam = gam(Case_rate~s(Date,bs="cr")+Temperature_9am+Temperature_3pm+Humidity_9am+Humidity_3pm+NO+SO2+NO2+OZONE+PM10+PM2.5, family=nb(link="log"),data = syd_ts)

plot(syd_gam)
summary(syd_gam)



## Including Plots

```{r}
library(ggplot2)
library(reshape2)
library(dplyr)
library(GGally)
library(patchwork) # To display 2 charts together
library(hrbrthemes)
library(vegan)
library(tidyverse)
library(GGally)
library(goeveg)
library(viridis)
library(Manu)
```


```{r}
data_all = data.frame(ts(IS.df, start = c(2021,03),frequency = 365))

```


```{r  fig.align="center", echo = FALSE,fig.width = 12, fig.height=6}
ggpairs(data_all)
```

```{r}

data1 = data_all[c(1:13)]

data1$Date = IS.df$Time
data1


data1_melt = melt(data1, id = c("Time","Date"))
data1_melt


ggplot(data1_melt, aes(x = Time, y = value,color = variable, group = variable))+geom_line()+labs(y="Temperture",x="Time")+ facet_wrap(~variable,ncol=2, scales='free_y')+theme_bw()

```


HNE: 

```{r}
HNE.df = read.csv("Newcastle_HNE.csv", header = TRUE)
```

```{r}
HNE.df$New_HNE_temperature_9am[HNE.df$New_HNE_temperature_9am ==""] <- NA 
HNE.df$New_HNE_temperature_9am = as.numeric(HNE.df$New_HNE_temperature_9am)
mean(HNE.df$New_HNE_temperature_9am, na.rm = TRUE)
HNE.df$New_HNE_temperature_9am[is.na(HNE.df$New_HNE_temperature_9am)]<-mean(HNE.df$New_HNE_temperature_9am, na.rm = TRUE)
HNE.df$New_HNE_temperature_9am
```


```{r}
HNE.df$New_HNE_temperature_3pm[HNE.df$New_HNE_temperature_3pm ==""] <- NA 
HNE.df$New_HNE_temperature_3pm = as.numeric(HNE.df$New_HNE_temperature_3pm)
mean(HNE.df$New_HNE_temperature_3pm, na.rm = TRUE)
HNE.df$New_HNE_temperature_3pm[is.na(HNE.df$New_HNE_temperature_3pm)]<-mean(HNE.df$New_HNE_temperature_3pm, na.rm = TRUE)
HNE.df$New_HNE_temperature_3pm
```


```{r}
HNE.df$New_HNE_humidity_9am[HNE.df$New_HNE_humidity_9am ==""] <- NA 
HNE.df$New_HNE_humidity_9am = as.numeric(HNE.df$New_HNE_humidity_9am)
mean(HNE.df$New_HNE_humidity_9am, na.rm = TRUE)
HNE.df$New_HNE_humidity_9am[is.na(HNE.df$New_HNE_humidity_9am)]<-mean(HNE.df$New_HNE_humidity_9am, na.rm = TRUE)
HNE.df$New_HNE_humidity_9am
```

```{r}
HNE.df$New_HNE_humidity_3pm[HNE.df$New_HNE_humidity_3pm ==""] <- NA 
HNE.df$New_HNE_humidity_3pm = as.numeric(HNE.df$New_HNE_humidity_3pm)
mean(HNE.df$New_HNE_humidity_3pm, na.rm = TRUE)
HNE.df$New_HNE_humidity_3pm[is.na(HNE.df$New_HNE_humidity_3pm)]<-mean(HNE.df$New_HNE_humidity_3pm, na.rm = TRUE)
HNE.df$New_HNE_humidity_3pm
```

```{r}
HNE.df$New_HNE_SO2[HNE.df$New_HNE_SO2 ==""] <- NA 
HNE.df$New_HNE_SO2 = as.numeric(HNE.df$New_HNE_SO2)
mean(HNE.df$New_HNE_SO2, na.rm = TRUE)
HNE.df$New_HNE_SO2[is.na(HNE.df$New_HNE_SO2)]<-mean(HNE.df$New_HNE_SO2, na.rm = TRUE)
HNE.df$New_HNE_SO2
```

```{r}
HNE.df$New_HNE_NO[HNE.df$New_HNE_NO ==""] <- NA 
HNE.df$New_HNE_NO = as.numeric(HNE.df$New_HNE_NO)
mean(HNE.df$New_HNE_NO, na.rm = TRUE)
HNE.df$New_HNE_NO[is.na(HNE.df$New_HNE_NO)]<-mean(HNE.df$New_HNE_NO, na.rm = TRUE)
HNE.df$New_HNE_NO
```

```{r}
HNE.df$New_HNE_NO2[HNE.df$New_HNE_NO2 ==""] <- NA 
HNE.df$New_HNE_NO2 = as.numeric(HNE.df$New_HNE_NO2)
mean(HNE.df$New_HNE_NO2, na.rm = TRUE)
HNE.df$New_HNE_NO2[is.na(HNE.df$New_HNE_NO2)]<-mean(HNE.df$New_HNE_NO2, na.rm = TRUE)
HNE.df$New_HNE_NO2
```

```{r}
HNE.df$New_HNE_OZONE[HNE.df$New_HNE_OZONE ==""] <- NA 
HNE.df$New_HNE_OZONE = as.numeric(HNE.df$New_HNE_OZONE)
mean(HNE.df$New_HNE_OZONE, na.rm = TRUE)
HNE.df$New_HNE_OZONE[is.na(HNE.df$New_HNE_OZONE)]<-mean(HNE.df$New_HNE_OZONE, na.rm = TRUE)
HNE.df$New_HNE_OZONE
```

```{r}
HNE.df$New_HNE_PM10[HNE.df$New_HNE_PM10 ==""] <- NA 
HNE.df$New_HNE_PM10 = as.numeric(HNE.df$New_HNE_PM10)
mean(HNE.df$New_HNE_PM10, na.rm = TRUE)
HNE.df$New_HNE_PM10[is.na(HNE.df$New_HNE_PM10)]<-mean(HNE.df$New_HNE_PM10, na.rm = TRUE)
HNE.df$New_HNE_PM10
```

```{r}
HNE.df$New_HNE_PM2.5[HNE.df$New_HNE_PM2.5 ==""] <- NA 
HNE.df$New_HNE_PM2.5 = as.numeric(HNE.df$New_HNE_PM2.5)
mean(HNE.df$New_HNE_PM2.5, na.rm = TRUE)
HNE.df$New_HNE_PM2.5[is.na(HNE.df$New_HNE_PM2.5)]<-mean(HNE.df$New_HNE_PM2.5, na.rm = TRUE)
HNE.df$New_HNE_PM2.5
```

```{r}
HNE.df$New_HNE_CO[HNE.df$New_HNE_CO ==""] <- NA 
HNE.df$New_HNE_CO = as.numeric(HNE.df$New_HNE_CO)
mean(HNE.df$New_HNE_CO, na.rm = TRUE)
HNE.df$New_HNE_CO[is.na(HNE.df$New_HNE_CO)]<-mean(HNE.df$New_HNE_CO, na.rm = TRUE)
HNE.df$New_HNE_CO
```

```{r}
HNE.df$New_HNE_CO[HNE.df$New_HNE_CO ==""] <- NA 
HNE.df$New_HNE_CO = as.numeric(HNE.df$New_HNE_CO)
mean(HNE.df$New_HNE_CO, na.rm = TRUE)
HNE.df$New_HNE_CO[is.na(HNE.df$New_HNE_CO)]<-mean(HNE.df$New_HNE_CO, na.rm = TRUE)
HNE.df$New_HNE_CO
```




## Including Plots



```{r}
library(ggplot2)
library(reshape2)
library(dplyr)
library(GGally)
library(lubridate)
library(forecast)
```



```{r}
data_all = data.frame(ts(HNE.df, start = c(2021,03),frequency = 365))

```


```{r  fig.align="center", echo = FALSE,fig.width = 12, fig.height=6}
ggpairs(data_all)
```
```{r}

data1 = data_all[c(1:13)]

data1$Date = HNE.df$Time
data1


data1_melt = melt(data1, id = c("Time","Date"))
data1_melt


ggplot(data1_melt, aes(x = Time, y = value,color = variable, group = variable))+geom_line()+labs(y="Value",x="Time")+ facet_wrap(~variable,ncol=2, scales='free_y')+theme_bw()+geom_smooth(method="lm", se=FALSE,colour = "black")
```

```{r}
data_all1 = ts(HNE.df, start = c(2021,03),frequency = 365)
linear.fit = tslm(New_HNE_cases~New_HNE_temperature_9am+New_HNE_temperature_3pm+New_HNE_humidity_9am+New_HNE_humidity_3pm+New_HNE_NO+New_HNE_SO2+New_HNE_NO2+New_HNE_OZONE+New_HNE_PM10+New_HNE_PM2.5+New_HNE_CO+trend,data = data_all1)
checkresiduals(linear.fit)
summary(linear.fit)
CV(linear.fit)
```



```{r}
## model selection using BIC for logistic regression
library(MuMIn)
options(na.action = "na.fail")
all.fits1 = dredge(linear.fit, rank ="AIC")
head(all.fits1)
best.model1 = get.models(all.fits1,1)[[1]]
summary(best.model1)
```


```{r}
library(mgcv)
library(nlme)
gam.fit = gam(New_HNE_cases~s(Time)+New_HNE_temperature_9am+New_HNE_temperature_3pm+New_HNE_humidity_9am+New_HNE_humidity_3pm+New_HNE_NO+New_HNE_SO2+New_HNE_NO2+New_HNE_OZONE+New_HNE_PM10+New_HNE_PM2.5+New_HNE_CO,data = data_all1)

plot(gam.fit)
summary(gam.fit)

```

```{r}
## model selection using BIC for logistic regression
library(MuMIn)
options(na.action = "na.fail")
all.fits = dredge(gam.fit, rank ="AIC")
head(all.fits)
best.model = get.models(all.fits,1)[[1]]
summary(best.model)

```

```{r fig.align="center", echo = FALSE,fig.width = 12, fig.height=6}
library(patchwork) # To display 2 charts together
library(hrbrthemes)
library(vegan)
library(tidyverse)
library(GGally)
library(goeveg)
library(viridis)
library(Manu)
```

```{r}
library(skimr)
skim(data_all1)
```
